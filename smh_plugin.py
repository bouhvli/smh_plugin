# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Smh
                                 A QGIS plugin
 connect to a postreSql and load the data to Qgis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-06
        git sha              : $Format:%H$
        copyright            : (C) 2024 by hamza bouhali
        email                : bouhali.hamza.2@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsDataSourceUri, QgsVectorLayer, QgsProject

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .smh_plugin_dialog import SmhDialog
import os.path
import psycopg2
from .main_ui import MainDialog

class Smh:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        self.smh_dialog = SmhDialog()
        
        self.main_window = MainDialog()
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Smh_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SMH')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Smh', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToDatabaseMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/smh_plugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Smh'),
            callback=self.run,
            parent=self.iface.mainWindow())
        #get the valeus
        self.smh_dialog.connect_db.clicked.connect(self.__connect_to_database)
        # will be set False in run()
        self.first_start = True

    def __connect_to_database(self):
        #establishing the connection with the postgresql
        try:
            username = self.smh_dialog.username.text()
            password = self.smh_dialog.password.text()
            host = self.smh_dialog.host.text()
            port = self.smh_dialog.port.text()
            database_name = self.smh_dialog.dbname.text()
            connection = psycopg2.connect(
            dbname=database_name,
            user=username,
            password=password,
            host=host,
            port=port
            )
            cursor = connection.cursor()
            # open the main window and populate the combobox of the comboboxs
            if cursor:
                self.open_main_window()
                self.add_data_to_combobox(cursor=cursor, \
                    query="select distinct commune from cadastre;", combo_name=self.main_window.commune)
                self.add_data_to_combobox(cursor=cursor, \
                    query="select distinct lieudit from cadastre;", combo_name=self.main_window.lieudit)
                self.add_data_to_combobox(cursor=cursor, \
                    query="select distinct proprio from cadastre;", combo_name=self.main_window.proprio)
                self.add_data_to_combobox(cursor=cursor, \
                    query="select distinct pres_sol from cadastre;", combo_name=self.main_window.pres_sol)
                self.add_data_to_combobox(cursor=cursor, \
                    query="select distinct pres_bati from cadastre;", combo_name=self.main_window.pres_bati)
            else:
                print(f"Error cant establish the connection")
        except Exception as e:
            print(f"Error: {e}")
        

    def open_main_window(self):
        self.main_window.show()
        self.smh_dialog.close()

    def add_data_to_combobox(self, cursor, query, combo_name):
        cursor.execute(query)
        categories = cursor.fetchall()
        # Step 3: Populate the QComboBox with the fetched data
        if categories:
            for category in categories: # Debugging line
                combo_name.addItem(category[0])
        else:
            print("No categories found.")

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginDatabaseMenu(
                self.tr(u'&SMH'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            

        # show the dialog
        self.smh_dialog.show()
        # Run the dialog event loop
        result = self.smh_dialog.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

"""
cursor.execute("SELECT * FROM cadastre LIMIT 10")
        rows = cursor.fetchall()
        temp_table = f"temp_cadastre"
        cursor.execute(f"CREATE TABLE {temp_table} AS SELECT * FROM cadastre LIMIT 10")
        connection.commit()
        uri = QgsDataSourceUri()
        uri.setConnection(host, port, database_name, username, password)
        uri.setDataSource('public', temp_table, 'geom')
        layer = QgsVectorLayer(uri.uri(), 'cadastre', "postgres")
        if layer.isValid():
                QgsProject.instance().addMapLayer(layer)
        else:
            print("Layer failed to load!")
        cursor.close()
        connection.close()
"""